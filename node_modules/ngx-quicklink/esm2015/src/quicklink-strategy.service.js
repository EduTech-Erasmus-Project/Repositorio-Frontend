import { Injectable } from '@angular/core';
import { Router, PRIMARY_OUTLET } from '@angular/router';
import { PrefetchRegistry } from './prefetch-registry.service';
import { EMPTY } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './prefetch-registry.service';
import * as ɵngcc2 from '@angular/router';
export class QuicklinkStrategy {
    constructor(registry, router) {
        this.registry = registry;
        this.router = router;
        this.loading = new Set();
    }
    preload(route, load) {
        if (this.loading.has(route)) {
            // Don't preload the same route twice
            return EMPTY;
        }
        const conn = typeof navigator !== 'undefined' ? navigator.connection : undefined;
        if (conn) {
            // Don't preload if the user is on 2G. or if Save-Data is enabled..
            if ((conn.effectiveType || '').includes('2g') || conn.saveData)
                return EMPTY;
        }
        // Prevent from preloading
        if (route.data && route.data.preload === false) {
            return EMPTY;
        }
        const fullPath = findPath(this.router.config, route);
        if (this.registry.shouldPrefetch(fullPath)) {
            this.loading.add(route);
            return load();
        }
        return EMPTY;
    }
}
QuicklinkStrategy.ɵfac = function QuicklinkStrategy_Factory(t) { return new (t || QuicklinkStrategy)(ɵngcc0.ɵɵinject(ɵngcc1.PrefetchRegistry), ɵngcc0.ɵɵinject(ɵngcc2.Router)); };
QuicklinkStrategy.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: QuicklinkStrategy, factory: QuicklinkStrategy.ɵfac });
QuicklinkStrategy.ctorParameters = () => [
    { type: PrefetchRegistry },
    { type: Router }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(QuicklinkStrategy, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.PrefetchRegistry }, { type: ɵngcc2.Router }]; }, null); })();
const findPath = (config, route) => {
    config = config.slice();
    const parent = new Map();
    const visited = new Set();
    while (config.length) {
        const el = config.shift();
        visited.add(el);
        if (el === route)
            break;
        let children = el.children || [];
        const current = el._loadedConfig;
        if (current && current.routes) {
            children = children.concat(current.routes);
        }
        children.forEach((r) => {
            if (visited.has(r))
                return;
            parent.set(r, el);
            config.push(r);
        });
    }
    let path = '';
    let current = route;
    while (current) {
        if (isPrimaryRoute(current)) {
            path = `/${current.path}${path}`;
        }
        else {
            path = `/(${current.outlet}:${current.path}${path})`;
        }
        current = parent.get(current);
    }
    return path.replace(/\/\//, '/');
};
const ɵ0 = findPath;
function isPrimaryRoute(route) {
    return route.outlet === PRIMARY_OUTLET || !route.outlet;
}
export { ɵ0 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVpY2tsaW5rLXN0cmF0ZWd5LnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9xdWlja2xpbmstc3RyYXRlZ3kuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBc0IsTUFBTSxFQUFTLGNBQWMsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3BGLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQy9ELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxNQUFNLENBQUM7Ozs7QUFHN0IsTUFBTSxPQUFPLGlCQUFpQjtBQUFHLElBRy9CLFlBQ1UsUUFBMEIsRUFDMUIsTUFBYztBQUN4QixRQUZVLGFBQVEsR0FBUixRQUFRLENBQWtCO0FBQUMsUUFDM0IsV0FBTSxHQUFOLE1BQU0sQ0FBUTtBQUFDLFFBSnpCLFlBQU8sR0FBRyxJQUFJLEdBQUcsRUFBUyxDQUFDO0FBQzdCLElBSUssQ0FBQztBQUNOLElBQ0UsT0FBTyxDQUFDLEtBQVksRUFBRSxJQUFjO0FBQ3RDLFFBQUksSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRTtBQUNqQyxZQUFNLHFDQUFxQztBQUMzQyxZQUFNLE9BQU8sS0FBSyxDQUFDO0FBQ25CLFNBQUs7QUFDTCxRQUFJLE1BQU0sSUFBSSxHQUFHLE9BQU8sU0FBUyxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUUsU0FBaUIsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztBQUM5RixRQUFJLElBQUksSUFBSSxFQUFFO0FBQ2QsWUFBTSxtRUFBbUU7QUFDekUsWUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsSUFBSSxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLFFBQVE7QUFBRSxnQkFBQSxPQUFPLEtB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QztBQUNGO0FBQ0EsU0FBUyxjQUFjLENBQUMsS0FBWTtBQUNwQyxJQUFFLE9BQU8sS0FBSyxDQUFDLE1BQU0sS0FBSyxjQUFjLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDO0FBQzFELENBQUM7QUFDRDtBQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUHJlbG9hZGluZ1N0cmF0ZWd5LCBSb3V0ZXIsIFJvdXRlLCBQUklNQVJZX09VVExFVCB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBQcmVmZXRjaFJlZ2lzdHJ5IH0gZnJvbSAnLi9wcmVmZXRjaC1yZWdpc3RyeS5zZXJ2aWNlJztcbmltcG9ydCB7IEVNUFRZIH0gZnJvbSAncnhqcyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBRdWlja2xpbmtTdHJhdGVneSBpbXBsZW1lbnRzIFByZWxvYWRpbmdTdHJhdGVneSB7XG4gIGxvYWRpbmcgPSBuZXcgU2V0PFJvdXRlPigpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVnaXN0cnk6IFByZWZldGNoUmVnaXN0cnksXG4gICAgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlcixcbiAgKSB7fVxuXG4gIHByZWxvYWQocm91dGU6IFJvdXRlLCBsb2FkOiBGdW5jdGlvbikge1xuICAgIGlmICh0aGlzLmxvYWRpbmcuaGFzKHJvdXRlKSkge1xuICAgICAgLy8gRG9uJ3QgcHJlbG9hZCB0aGUgc2FtZSByb3V0ZSB0d2ljZVxuICAgICAgcmV0dXJuIEVNUFRZO1xuICAgIH1cbiAgICBjb25zdCBjb25uID0gdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgPyAobmF2aWdhdG9yIGFzIGFueSkuY29ubmVjdGlvbiA6IHVuZGVmaW5lZDtcbiAgICBpZiAoY29ubikge1xuICAgICAgLy8gRG9uJ3QgcHJlbG9hZCBpZiB0aGUgdXNlciBpcyBvbiAyRy4gb3IgaWYgU2F2ZS1EYXRhIGlzIGVuYWJsZWQuLlxuICAgICAgaWYgKChjb25uLmVmZmVjdGl2ZVR5cGUgfHwgJycpLmluY2x1ZGVzKCcyZycpIHx8IGNvbm4uc2F2ZURhdGEpIHJldHVybiBFTVBUWTtcbiAgICB9XG4gICAgLy8gUHJldmVudCBmcm9tIHByZWxvYWRpbmdcbiAgICBpZiAocm91dGUuZGF0YSAmJiByb3V0ZS5kYXRhLnByZWxvYWQgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gRU1QVFk7XG4gICAgfVxuICAgIGNvbnN0IGZ1bGxQYXRoID0gZmluZFBhdGgodGhpcy5yb3V0ZXIuY29uZmlnLCByb3V0ZSk7XG4gICAgaWYgKHRoaXMucmVnaXN0cnkuc2hvdWxkUHJlZmV0Y2goZnVsbFBhdGgpKSB7XG4gICAgICB0aGlzLmxvYWRpbmcuYWRkKHJvdXRlKTtcbiAgICAgIHJldHVybiBsb2FkKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIEVNUFRZO1xuICB9XG59XG5cbmNvbnN0IGZpbmRQYXRoID0gKGNvbmZpZzogUm91dGVbXSwgcm91dGU6IFJvdXRlKTogc3RyaW5nID0+IHtcbiAgY29uZmlnID0gY29uZmlnLnNsaWNlKCk7XG4gIGNvbnN0IHBhcmVudCA9IG5ldyBNYXA8Um91dGUsIFJvdXRlPigpO1xuICBjb25zdCB2aXNpdGVkID0gbmV3IFNldDxSb3V0ZT4oKTtcbiAgd2hpbGUgKGNvbmZpZy5sZW5ndGgpIHtcbiAgICBjb25zdCBlbCA9IGNvbmZpZy5zaGlmdCgpO1xuICAgIHZpc2l0ZWQuYWRkKGVsKTtcbiAgICBpZiAoZWwgPT09IHJvdXRlKSBicmVhaztcbiAgICBsZXQgY2hpbGRyZW4gPSBlbC5jaGlsZHJlbiB8fCBbXTtcbiAgICBjb25zdCBjdXJyZW50ID0gKGVsIGFzIGFueSkuX2xvYWRlZENvbmZpZztcbiAgICBpZiAoY3VycmVudCAmJiBjdXJyZW50LnJvdXRlcykge1xuICAgICAgY2hpbGRyZW4gPSBjaGlsZHJlbi5jb25jYXQoY3VycmVudC5yb3V0ZXMpO1xuICAgIH1cbiAgICBjaGlsZHJlbi5mb3JFYWNoKChyOiBSb3V0ZSkgPT4ge1xuICAgICAgaWYgKHZpc2l0ZWQuaGFzKHIpKSByZXR1cm47XG4gICAgICBwYXJlbnQuc2V0KHIsIGVsKTtcbiAgICAgIGNvbmZpZy5wdXNoKHIpO1xuICAgIH0pO1xuICB9XG4gIGxldCBwYXRoID0gJyc7XG4gIGxldCBjdXJyZW50ID0gcm91dGU7XG5cbiAgd2hpbGUgKGN1cnJlbnQpIHtcbiAgICBpZiAoaXNQcmltYXJ5Um91dGUoY3VycmVudCkpIHtcbiAgICAgIHBhdGggPSBgLyR7Y3VycmVudC5wYXRofSR7cGF0aH1gO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXRoID0gYC8oJHtjdXJyZW50Lm91dGxldH06JHtjdXJyZW50LnBhdGh9JHtwYXRofSlgO1xuICAgIH1cbiAgICBjdXJyZW50ID0gcGFyZW50LmdldChjdXJyZW50KTtcbiAgfVxuXG4gIHJldHVybiBwYXRoLnJlcGxhY2UoL1xcL1xcLy8sICcvJyk7XG59O1xuXG5mdW5jdGlvbiBpc1ByaW1hcnlSb3V0ZShyb3V0ZTogUm91dGUpIHtcbiAgcmV0dXJuIHJvdXRlLm91dGxldCA9PT0gUFJJTUFSWV9PVVRMRVQgfHwgIXJvdXRlLm91dGxldDtcbn1cbiJdfQ==