import { Directive, ElementRef, Optional, Inject, Input } from '@angular/core';
import { RouterLink, RouterLinkWithHref } from '@angular/router';
import { LinkHandler } from './link-handler.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/router';
export class LinkDirective {
    constructor(linkHandlers, el, link, linkWithHref) {
        this.linkHandlers = linkHandlers;
        this.el = el;
        this.linkHandler = this.linkHandlers.filter(h => h.supported()).shift();
        this.rl = link || linkWithHref;
        if (this.element && this.element.setAttribute) {
            this.element.setAttribute('ngx-ql', '');
        }
    }
    ngOnChanges(c) {
        if (c.routerLink) {
            this.linkHandler.unregister(this);
            this.linkHandler.register(this);
        }
    }
    ngOnDestroy() {
        this.linkHandler.unregister(this);
    }
    get element() {
        return this.el.nativeElement;
    }
    get urlTree() {
        return this.rl.urlTree;
    }
}
LinkDirective.ɵfac = function LinkDirective_Factory(t) { return new (t || LinkDirective)(ɵngcc0.ɵɵdirectiveInject(LinkHandler), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.RouterLink, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.RouterLinkWithHref, 8)); };
LinkDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: LinkDirective, selectors: [["", "routerLink", ""]], inputs: { routerLink: "routerLink" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
LinkDirective.ctorParameters = () => [
    { type: Array, decorators: [{ type: Inject, args: [LinkHandler,] }] },
    { type: ElementRef },
    { type: RouterLink, decorators: [{ type: Optional }] },
    { type: RouterLinkWithHref, decorators: [{ type: Optional }] }
];
LinkDirective.propDecorators = {
    routerLink: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LinkDirective, [{
        type: Directive,
        args: [{
                selector: '[routerLink]'
            }]
    }], function () { return [{ type: Array, decorators: [{
                type: Inject,
                args: [LinkHandler]
            }] }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.RouterLink, decorators: [{
                type: Optional
            }] }, { type: ɵngcc1.RouterLinkWithHref, decorators: [{
                type: Optional
            }] }]; }, { routerLink: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluay5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saW5rLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFVBQVUsRUFDVixRQUFRLEVBQ1IsTUFBTSxFQUdOLEtBQUssRUFFTixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsVUFBVSxFQUFFLGtCQUFrQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDakUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHdCQUF3QixDQUFDOzs7QUFNckQsTUFBTSxPQUFPLGFBQWE7QUFBRyxJQUszQixZQUMrQixZQUFtQyxFQUN4RCxFQUFjLEVBQ1YsSUFBZ0IsRUFDaEIsWUFBZ0M7QUFDN0MsUUFKOEIsaUJBQVksR0FBWixZQUFZLENBQXVCO0FBQUMsUUFDekQsT0FBRSxHQUFGLEVBQUUsQ0FBWTtBQUFDLFFBSXZCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUM1RSxRQUFJLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxJQUFJLFlBQVksQ0FBQztBQUNuQyxRQUFJLElBQUksSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRTtBQUNuRCxZQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUM5QyxTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0gsSUFDRSxXQUFXLENBQUMsQ0FBZ0I7QUFDOUIsUUFBSSxJQUFJLENBQUMsQ0FBQyxVQUFVLEVBQUU7QUFDdEIsWUFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN4QyxZQUFNLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3RDLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSCxJQUNFLFdBQVc7QUFDYixRQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3RDLElBQUUsQ0FBQztBQUNILElBQ0UsSUFBSSxPQUFPO0FBQUssUUFDZCxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDO0FBQ2pDLElBQUUsQ0FBQztBQUNILElBQ0UsSUFBSSxPQUFPO0FBQUssUUFDZCxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDO0FBQzNCLElBQUUsQ0FBQztBQUNIO3lDQXZDQyxTQUFTLFNBQUMsa0JBQ1QsUUFBUSxFQUFFLGNBQWMsY0FDekI7MkxBQ0k7QUFBQztBQUF1Qyx3Q0FNeEMsTUFBTSxTQUFDLFdBQVc7QUFBUyxZQXJCOUIsVUFBVTtBQUNWLFlBT08sVUFBVSx1QkFlZCxRQUFRO0FBQU8sWUFmQyxrQkFBa0IsdUJBZ0JsQyxRQUFRO0FBQU07QUFBRztBQUV0Qix5QkFWRyxLQUFLO0FBQUk7Ozs7Ozs7Ozs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBFbGVtZW50UmVmLFxuICBPcHRpb25hbCxcbiAgSW5qZWN0LFxuICBPbkNoYW5nZXMsXG4gIE9uRGVzdHJveSxcbiAgSW5wdXQsXG4gIFNpbXBsZUNoYW5nZXNcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZXJMaW5rLCBSb3V0ZXJMaW5rV2l0aEhyZWYgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgTGlua0hhbmRsZXIgfSBmcm9tICcuL2xpbmstaGFuZGxlci5zZXJ2aWNlJztcbmltcG9ydCB7IExpbmtIYW5kbGVyU3RyYXRlZ3kgfSBmcm9tICcuL2xpbmstaGFuZGxlci1zdHJhdGVneSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tyb3V0ZXJMaW5rXSdcbn0pXG5leHBvcnQgY2xhc3MgTGlua0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcbiAgQElucHV0KCkgcm91dGVyTGluazogUGljazxSb3V0ZXJMaW5rIHwgUm91dGVyTGlua1dpdGhIcmVmLCAncm91dGVyTGluayc+Wydyb3V0ZXJMaW5rJ107XG4gIHByaXZhdGUgcmw6IFJvdXRlckxpbmsgfCBSb3V0ZXJMaW5rV2l0aEhyZWY7XG4gIHByaXZhdGUgbGlua0hhbmRsZXI6IExpbmtIYW5kbGVyU3RyYXRlZ3k7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChMaW5rSGFuZGxlcikgcHJpdmF0ZSBsaW5rSGFuZGxlcnM6IExpbmtIYW5kbGVyU3RyYXRlZ3lbXSxcbiAgICBwcml2YXRlIGVsOiBFbGVtZW50UmVmLFxuICAgIEBPcHRpb25hbCgpIGxpbms6IFJvdXRlckxpbmssXG4gICAgQE9wdGlvbmFsKCkgbGlua1dpdGhIcmVmOiBSb3V0ZXJMaW5rV2l0aEhyZWZcbiAgKSB7XG4gICAgdGhpcy5saW5rSGFuZGxlciA9IHRoaXMubGlua0hhbmRsZXJzLmZpbHRlcihoID0+IGguc3VwcG9ydGVkKCkpLnNoaWZ0KCk7XG4gICAgdGhpcy5ybCA9IGxpbmsgfHwgbGlua1dpdGhIcmVmO1xuICAgIGlmICh0aGlzLmVsZW1lbnQgJiYgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSkge1xuICAgICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnbmd4LXFsJywgJycpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICBpZiAoYy5yb3V0ZXJMaW5rKSB7XG4gICAgICB0aGlzLmxpbmtIYW5kbGVyLnVucmVnaXN0ZXIodGhpcyk7XG4gICAgICB0aGlzLmxpbmtIYW5kbGVyLnJlZ2lzdGVyKHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMubGlua0hhbmRsZXIudW5yZWdpc3Rlcih0aGlzKTtcbiAgfVxuXG4gIGdldCBlbGVtZW50KCk6IEVsZW1lbnQge1xuICAgIHJldHVybiB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQ7XG4gIH1cblxuICBnZXQgdXJsVHJlZSgpOiBhbnkge1xuICAgIHJldHVybiB0aGlzLnJsLnVybFRyZWU7XG4gIH1cbn1cbiJdfQ==