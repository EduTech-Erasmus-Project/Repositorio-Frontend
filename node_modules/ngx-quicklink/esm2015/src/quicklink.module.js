import { NgModule } from '@angular/core';
import { LinkDirective } from './link.directive';
import { ObservableLinkHandler, PreloadLinkHandler, LinkHandler } from './link-handler.service';
import { PrefetchRegistry } from './prefetch-registry.service';
import { QuicklinkStrategy } from './quicklink-strategy.service';
import * as ɵngcc0 from '@angular/core';
export class QuicklinkModule {
}
QuicklinkModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: QuicklinkModule });
QuicklinkModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function QuicklinkModule_Factory(t) { return new (t || QuicklinkModule)(); }, providers: [
        {
            provide: LinkHandler,
            useClass: ObservableLinkHandler,
            multi: true
        },
        {
            provide: LinkHandler,
            useClass: PreloadLinkHandler,
            multi: true
        },
        PrefetchRegistry,
        QuicklinkStrategy
    ] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(QuicklinkModule, { declarations: function () { return [LinkDirective]; }, exports: function () { return [LinkDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(QuicklinkModule, [{
        type: NgModule,
        args: [{
                declarations: [LinkDirective],
                providers: [
                    {
                        provide: LinkHandler,
                        useClass: ObservableLinkHandler,
                        multi: true
                    },
                    {
                        provide: LinkHandler,
                        useClass: PreloadLinkHandler,
                        multi: true
                    },
                    PrefetchRegistry,
                    QuicklinkStrategy
                ],
                exports: [LinkDirective]
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVpY2tsaW5rLm1vZHVsZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3F1aWNrbGluay5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDakQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLGtCQUFrQixFQUFFLFdBQVcsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ2hHLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQy9ELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDhCQUE4QixDQUFDOztBQW9CakUsTUFBTSxPQUFPLGVBQWU7QUFBRzsyQ0FsQjlCLFFBQVEsU0FBQztHQUNSLFlBQVksRUFBRSxDQUFDLGFBQWEsQ0FBQyxrQkFDN0IsU0FBUyxFQUFFLHNCQUNULDBCQUNFLE9BQU8sRUFBRSxXQUFXO01BQ3BCO0lBQVEsRUFBRSxxQkFBcUI7bUJBQy9CLEtBQUssRUFBRSxJQUFJO09BQ1o7S0FDRDs7VUFDRSxPQUFPLEVBQUUsV0FBVztzQkFDcEIsUUFBUSxFQUFFO1FBQWtCO1VBQzVCO0lBQUssRUFBRSxJQUFJO01BQ1o7RUFDRDtRQUFnQixzQkFDaEIsaUJBQWlCLGtCQUNsQixrQkFDRCxPQUFPLEVBQUUsQ0FBQyxhQUFhLENBQUMsY0FDekI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzswQkFDSTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IExpbmtEaXJlY3RpdmUgfSBmcm9tICcuL2xpbmsuZGlyZWN0aXZlJztcbmltcG9ydCB7IE9ic2VydmFibGVMaW5rSGFuZGxlciwgUHJlbG9hZExpbmtIYW5kbGVyLCBMaW5rSGFuZGxlciB9IGZyb20gJy4vbGluay1oYW5kbGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgUHJlZmV0Y2hSZWdpc3RyeSB9IGZyb20gJy4vcHJlZmV0Y2gtcmVnaXN0cnkuc2VydmljZSc7XG5pbXBvcnQgeyBRdWlja2xpbmtTdHJhdGVneSB9IGZyb20gJy4vcXVpY2tsaW5rLXN0cmF0ZWd5LnNlcnZpY2UnO1xuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtMaW5rRGlyZWN0aXZlXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogTGlua0hhbmRsZXIsXG4gICAgICB1c2VDbGFzczogT2JzZXJ2YWJsZUxpbmtIYW5kbGVyLFxuICAgICAgbXVsdGk6IHRydWVcbiAgICB9LFxuICAgIHtcbiAgICAgIHByb3ZpZGU6IExpbmtIYW5kbGVyLFxuICAgICAgdXNlQ2xhc3M6IFByZWxvYWRMaW5rSGFuZGxlcixcbiAgICAgIG11bHRpOiB0cnVlXG4gICAgfSxcbiAgICBQcmVmZXRjaFJlZ2lzdHJ5LFxuICAgIFF1aWNrbGlua1N0cmF0ZWd5XG4gIF0sXG4gIGV4cG9ydHM6IFtMaW5rRGlyZWN0aXZlXVxufSlcbmV4cG9ydCBjbGFzcyBRdWlja2xpbmtNb2R1bGUge31cbiJdfQ==